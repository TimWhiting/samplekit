# There are .env.[_development|_preview|_staging|_production] files. Underscores are so vite doesn't use one implicitly https://vitejs.dev/guide/env-and-mode

#####            Hosting           #####
########################################
PUBLIC_ORIGIN="http://localhost:5173"
PUBLIC_EFFECTIVE_DOMAIN="localhost"

#####            Logging           #####
########################################
# trace, debug, info, warn, error, or fatal
PUBLIC_PINO_LOG_LEVEL="trace"
PINO_LOGFILE_ROOT="./logs"

#####           Database           #####
########################################
# Make distinct for each database. It is used by 3rd party resources to point back to the db which references it.
# This is important for guard implementations to make it impossible to delete third party data when referenced inside a different environment.
DB_NAME="dev"

# Dev: via docker (run the scripts in package.json)
# Prod: Create a free DB at https://supabase.com/dashboard/new
# - Find the connection string at https://supabase.com/dashboard/projects -> Project -> Project Settings -> Database -> Connection String -> URI (and replace password)
POSTGRES_PASSWORD="password"
PG_CONNECTION_STRING="postgres://postgres:password@localhost:5432/postgres"

#####          Transports          #####
########################################
# Use console instead of email/sms
PUBLIC_INTERCEPT_TRANSPORTS="true"

# https://console.twilio.com/
TWILIO_ACCOUNT_SID=""
TWILIO_AUTH_TOKEN=""
TWILIO_NUMBER=""

EMAIL_DEFAULT_SENDER=""

#####              AWS             #####
########################################
AWS_SERVICE_REGION="us-east-1" # AWS_REGION is a reserved environment variable in some deployment environments (such as Netlify)

# Create S3 Bucket
# - https://s3.console.aws.amazon.com/s3/ -> Create bucket with name and all default settings
# - Select bucket -> Permissions -> (CORS) Edit
# [
#   {
#     "AllowedHeaders": ["*"],
#     "AllowedMethods": ["PUT", "HEAD", "GET"],
#     "AllowedOrigins": ["*"],
#     "ExposeHeaders": []
#   }
# ]

# Create CloudFront Distribution
# - https://us-east-1.console.aws.amazon.com/cloudfront -> Create Distribution
# - Origin Domain: Choose S3 bucket
# - Origin Access -> Origin access control settings -> Choose Bucket Name
# - Redirect HTTP to HTTPS: Yes
# - Do not enable security protections
# - Create Distribution
# - Copy bucket policy to https://s3.console.aws.amazon.com/s3/ -> Select Bucket -> Permissions -> Bucket Policy

# Create IAM User
# - https://us-east-1.console.aws.amazon.com/iamv2/home#/users -> Create User with same name as bucket to make it easy to remember, and all default settings
# - https://us-east-1.console.aws.amazon.com/iamv2/home#/users -> Select User name -> Add permissions -> Create Inline Policy -> Visual
# - Service: S3, Actions: PutObject, DeleteObject, PutObjectTagging, GetObjectTagging -> Add ARNs -> samplekit, Any object name
# - Service: CloudFront, Actions: CreateInvalidation -> Add ARNs -> Resource in This account, Any distribution
# - Service: SES, Actions: CreateTemplate, UpdateTemplate, SendTemplatedEmail -> Add ARNs -> Any in this account
# - Service: Rekognition, Actions: DetectModerationLabels -> Resources: All
# -> Next -> Project name same name as bucket -> Create Policy

# Confirm SES sender email address
# - https://us-east-1.console.aws.amazon.com/ses -> Verified Identities -> Create Identity -> Email Address -> Your email address

# When ready, request SES production access

# Copy Keys:
# IAM: https://us-east-1.console.aws.amazon.com/iamv2/home#/users -> Select User -> Create access key -> Copy access key id and secret access key
IAM_ACCESS_KEY_ID=""
IAM_SECRET_ACCESS_KEY=""

# S3: https://s3.console.aws.amazon.com/s3/buckets -> Select Bucket -> Properties -> Copy region, bucket name, and bucket url
S3_BUCKET_NAME="samplekit"
S3_BUCKET_URL="https://samplekit.s3.us-east-1.amazonaws.com" # Same bucket for Prod and Dev. Only using Metadata to differentiate

# CloudFront: https://us-east-1.console.aws.amazon.com/cloudfront -> Select distribution -> Copy distribution id
CLOUDFRONT_URL=""             # Distrubution Domain Name (including https://)
CLOUDFRONT_DISTRIBUTION_ID="" # last part of ARN

#####           Turnstile          #####
########################################
# https://developers.cloudflare.com/turnstile/get-started/
PUBLIC_TURNSTILE_SITE_KEY=""
TURNSTILE_SECRET_KEY=""

#####         Google OAuth         #####
########################################
# https://console.cloud.google.com/apis -> create a new project (nav bar)
# Add a project name, then go to cloud.google.com/apis/credentials/consent and choose External

# 1 OAuth consent screen
# - App name, User support email, App Domain (http://localhost:5173), Developer contact information

# 2 Scopes
# - https://www.googleapis.com/auth/userinfo.email
# - https://www.googleapis.com/auth/userinfo.profile

# 3 Test users
# - Add Users

# Go to Credentials -> + Create Credentials -> OAuth client ID
# - Web application
# - Name
# - Authorized JavaScript origins (http://localhost and http://localhost:5173)
# - Authorized redirect URIs (http://localhost:5173/login/google/callback.json and http://localhost:5173/change-to-google/callback.json)

# https://console.cloud.google.com/apis/credentials
PUBLIC_GOOGLE_OAUTH_CLIENT_ID=""
GOOGLE_OAUTH_CLIENT_SECRET=""

#####       Endpoint API Keys      #####
########################################
# Create keys in hooks.server.ts: console.log(auth.config.randomString.generate({ alphabet: auth.config.randomString.alphabet.default, size: 63 }));
DELETE_EXPIRED_TOKENS_KEY=""
DELETE_EXPIRED_TOKENS_IP_WHITELIST=""
RESET_DB_KEY=""
RESET_DB_IP_WHITELIST=""

#####           Shopify            #####
########################################
PUBLIC_SHOPIFY_API_VERSION="2023-10"
PUBLIC_SHOPIFY_STOREFRONT_ACCESS_TOKEN="2472529e674ba75a539cf61207a477ae"
PUBLIC_SHOPIFY_STORE_DOMAIN="https://samplekit-shop.myshopify.com"
